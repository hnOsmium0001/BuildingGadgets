buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'maven-publish'
apply plugin: 'net.minecraftforge.gradle'
version = "$version"
def env = System.getenv()
if (env.BUILD_NUMBER) {
    version = version + "-" + "${env.BUILD_NUMBER}"
}
group = 'com.direwolf20.buildinggadgets' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'buildinggadgets'
String forgeVersion = "$minecraft_version-${forge_major}.$forge_minor"
String forgeName = "$forge_base:$forgeVersion"
sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

sourceSets {
    api {
        java {
            'src/api/java'
        }
        resources {
            'src/api/resources'
        }
    }
    apiTest {
        java {
            'src/apiTest/java'
        }
        resources {
            'src/apiTest/resources'
        }
    }
    main {
        java {
            'src/main/java'
        }
        resources {
            'src/main/resources'
        }
    }
    test {
        java {
            'src/test/java'
        }
        resources {
            'src/test/resources'
        }
    }
}

configurations {
    apiImplementation.extendsFrom minecraft
    apiTestImplementation.extendsFrom apiImplementation
    implementation.extendsFrom apiImplementation
    testImplementation.extendsFrom apiTestImplementation, implementation
}

idea {
    module {
        sourceDirs+=sourceSets.api.java.srcDirs
        sourceDirs+=sourceSets.api.resources.srcDirs
        testSourceDirs+= sourceSets.apiTest.java.srcDirs
        testSourceDirs+= sourceSets.apiTest.resources.srcDirs
    }
}

Project proj = project
eclipse {
    classpath {
        file {
            whenMerged { cp ->
                project.logger.lifecycle "[eclipse] Excluding sourceSet outputs from eclipse dependencies for project '${project.path}'"
                cp.entries.grep { it.kind == 'lib' }.each { entry ->
                    rootProject.allprojects { Project project ->
                        String buildDirPath = project.buildDir.path.replace('\\', '/') + '/'
                        String entryPath = entry.path

                        if (entryPath.startsWith(buildDirPath)) {
                            cp.entries.remove entry

                            if (project != proj) {
                                boolean projectContainsProjectDep = false
                                for (Configuration cfg : proj.configurations) {
                                    boolean cfgContainsProjectDependency = cfg.allDependencies.withType(ProjectDependency).collect { it.dependencyProject }.contains(project)
                                    if(cfgContainsProjectDependency) {
                                        projectContainsProjectDep = true
                                        break;
                                    }
                                }
                                if (!projectContainsProjectDep) {
                                    throw new GradleException("The project '${proj.path}' has a dependency to the outputs of project '${project.path}', but not to the project itself. This is not allowed because it will cause compilation in eclipse to behave differently than in gradle.")
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

minecraft {
    // the mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   snapshot are built nightly.
    // stable_#            stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'snapshot', version: '20190615-1.14.2'
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    //accessTransformer = file('my_at.cfg')

    // default run configurations.
    // these can be tweaked, removed, or duplicated as needed.
    runs {
        client = {
            // recommended logging data for a userdev environment
            properties 'forge.logging.markers': 'SCAN,REGISTRIES,REGISTRYDUMP'
            // recommended logging level for the console
            properties 'forge.logging.console.level': 'debug'
            workingDirectory project.file('run').canonicalPath
            sources sourceSets.main, sourceSets.api
        }
        server = {
            // recommended logging data for a userdev environment
            properties 'forge.logging.markers': 'SCAN,REGISTRIES,REGISTRYDUMP'
            // recommended logging level for the console
            properties 'forge.logging.console.level': 'debug'
            workingDirectory project.file('run').canonicalPath
            sources sourceSets.main, sourceSets.api
        }
    }
    /*maven {
        name 'Raoulvdberge Repo' // RS
        url 'https://repo.raoulvdberge.com/'
    }*/
}

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft forgeName
    apiTestImplementation sourceSets.api.output
    apiTestImplementation "org.junit.jupiter:junit-jupiter-api:${project.junit_version}"
    apiTestImplementation "org.junit.jupiter:junit-jupiter:${project.junit_version}"
    apiTestImplementation "org.hamcrest:hamcrest:$project.hamcrest_version"
    apiTestRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${project.junit_version}"
    implementation sourceSets.api.output
    testImplementation sourceSets.apiTest.output
    // deobfCompile "team.chisel.ctm:CTM:MC${minecraft_version}-${ctm_version}:api"
    // deobfCompile "refinedstorage:refinedstorage:${rs_version}:api"
    // runtime "team.chisel.ctm:CTM:MC${minecraft_version}-${ctm_version}"

    // you may put jars on which you depend on in ./libs
    // or you may define them like so..
    //compile "some.group:artifact:version:classifier"
    //compile "some.group:artifact:version"

    // real examples
    //compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    //compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // the 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
    //provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // These dependencies get remapped to your current MCP mappings
    //deobf 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // for more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

processResources { //Processes main only resouces
    from(sourceSets.main.resources.srcDirs) {
        include 'META-INF/mods.toml'
        expand 'version':project.version,'forge_major':project.forge_major,'update_json':project.update_json
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'META-INF/mods.toml'
    }
}

processApiResources {
    from(sourceSets.api.resources.srcDirs) {
        expand 'api_version':project.api_version, 'forge_major':project.forge_major
    }
}

task clearDoc (type: Delete) {
    delete javadoc.destinationDir
}
// Example for how to get properties into the manifest for reading by the runtime..
jar {
    group = project.artifactGroup
    manifest {
        attributes(["Specification-Title": "Buildinggadgets",
                    "Specification-Version": forge_major, // We are version 1 of the modlauncher specification
                    "Implementation-Title": project.archivesBaseName,
                    "Implementation-Version": project.version,
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")],)
    }
    from sourceSets.main.output, sourceSets.api.output
    dependsOn classes
}

void manipulateDocTags(List<String> tags) {
    tags.add("implNote:a:Implementation Note:")
    tags.add('implSpec:a:Implementation Requirements:')
    tags.add('apiNote:a:API Note:')
}

void setApiDocOptions(StandardJavadocDocletOptions options) {
    manipulateDocTags(options.getTags())
}

void setRegularDocOptions(StandardJavadocDocletOptions options) {
    manipulateDocTags(options.getTags())
}

javadoc {
    setRegularDocOptions(options)
    source = sourceSets.main.allJava.plus(sourceSets.api.allJava)
}

task docJar(type: Jar, dependsOn: javadoc) {
    group = project.artifactGroup
    manifest = jar.manifest
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task sourcesJar(type: Jar, dependsOn: classes) {
    group = project.artifactGroup
    manifest = jar.manifest
    classifier = 'sources'
    from sourceSets.main.allSource, sourceSets.api.allSource
}

task apiJar (type:Jar, dependsOn:apiClasses) {
    group = project.artifactGroup
    manifest {
        attributes(["Specification-Title": "Buildinggadgets-API",
                    "Specification-Version": forge_major,
                    "Implementation-Title": project.archivesBaseName+'-api',
                    "Implementation-Version": project.api_version,
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")],)
    }
    version = project.api_version
    appendix = 'api'
    from sourceSets.api.output
}

task apiSourcesJar(type: Jar, dependsOn: apiClasses) {
    group = project.artifactGroup
    manifest = apiJar.manifest
    version = project.api_version
    appendix = 'api'
    classifier = 'sources'
    from sourceSets.api.allSource
}

task apiDoc (type: Javadoc, dependsOn: clearDoc){
    classpath = sourceSets.api.compileClasspath
    exclude('com/dirwolf20/buildinggadgets/api') // no idea why, but this results in only the api doc being created - I thought this would be done by include
    source = sourceSets.api.allJava
    setApiDocOptions(options)
}

task apiDocJar(type: Jar, dependsOn: apiDoc) {
    group = project.artifactGroup
    manifest = apiJar.manifest
    version = project.api_version
    appendix = 'api'
    classifier = 'javadoc'
    from apiDoc.destinationDir
}

task allApiJars {
    group = project.artifactGroup
    dependsOn apiJar
    dependsOn apiDocJar
    dependsOn apiSourcesJar
}

task allImplementationJars {
    group = project.artifactGroup
    dependsOn jar
    dependsOn sourcesJar
    dependsOn docJar
}

task allJars {
    group = project.artifactGroup
    dependsOn allApiJars
    dependsOn allImplementationJars
}

task apiTestTask(type: Test) {
    description = 'Runs all api Tests.'
    group = 'verification'
    testClassesDirs = sourceSets.apiTest.output.classesDirs
    classpath = sourceSets.apiTest.runtimeClasspath
    useJUnitPlatform()
}

test {
    useJUnitPlatform()
    dependsOn apiTestTask
}

artifacts {
    archives apiJar
    archives apiDocJar
    archives apiSourcesJar
    archives jar
    archives docJar
    archives sourcesJar
}

publishing {
    publications {
        mavenApiJava(MavenPublication) {
            groupId = project.group
            artifactId = project.archivesBaseName+'-api'
            version = project.api_version
            artifact apiJar
            artifact apiDocJar
            artifact apiSourcesJar
            pom {
                name = "Buildinggadgets-API"
                url = "https://github.com/Direwolf20-MC/BuildingGadgets"
                developers  {
                    'Direwolf20'
                }
                contributors {
                    'Phylogeny'
                    'MichaelHillcox'
                    'MajorTuvok'
                }
                licenses {
                    'MIT License'
                }
            }
        }
        mavenJava(MavenPublication) {
            groupId = project.group
            artifactId = project.archivesBaseName
            version = project.version
            artifact jar
            artifact docJar
            artifact sourcesJar
            pom {
                name = "Buildinggadgets"
                url = "https://github.com/Direwolf20-MC/BuildingGadgets"
                developers  {
                    'Direwolf20'
                }
                contributors {
                    'Phylogeny'
                    'MichaelHillcox'
                    'MajorTuvok'
                }
                licenses {
                    'MIT License'
                }
            }
        }
    }
    repositories {
        maven {
            mavenCentral()
        }
    }
}

// Example configuration to allow publishing using the maven-publish task
// we define a custom artifact that is sourced from the reobfJar output task
// and then declare that to be published
// Note you'll need to add a repository here
def reobfFile = file("$buildDir/reobfJar/output.jar")
def reobfArtifact = artifacts.add('default', reobfFile) {
    type 'jar'
    builtBy 'reobfJar'
}